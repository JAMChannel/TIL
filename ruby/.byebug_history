exit
num <= 37.0
num
exit
num.class
num
exit
total[n + 1] + total[n + 1] - total[n]
total[n + 1]
total[1]
total
exit
total[n + 1]
total[n+1] + total[n+1] - total[n]
n
total
exit
total[n + 1]
total
total.count
total
trout[1]
trout
exit
total_trout[trout + 1][1] + line2[1] - line1[1]
line1[1]
line2[1]
total_trout[trout + 2]
total_trout[trout + 1][0] + line2[0] - line1[0]
total_trout[trout1 + 1][0] + line2[0] - line1[0]
total_trout[tro1 + 1][0] + line2[0] - line1[0]
line1[0]
line2[0]
exit
total_trout[1][trout + 1] + line2[1] - line2[0]
total_trout[1][trout + 1]
total_trout[1]
total_trout[0][trout + 1] + line1[1] - line1[0]
line1[1]
line1
total_trout[0][trout + 1]
total_trout[0]
exit
trout[0] - 2 
trout[0]
exit
[line1, line2]
line1[0]
line1[0].length
line1[0].lenght
line1[0].count
(line1[0].count + line2[0].count)
(line1[0] + line2[0])
line1[0]
line1
line1.to_i
line1.class
line.class
(line1.count + line2.count)
exit
items.each_slice(size/image).to_a
items.each_slice(size/image).to_a.transpose
items.each_slice(size/image).to_a
items.each_slice(size/image).to_a.transpose
items.each_slice(size/image)
items.each_slice
items
exit
image**2
divide.flatten.sum / image**2
divide.flatten.sum
divide.flatten
divide
divide.
divide.flatten
divide.flatten.sum / image**2
.flatten.sum / image**2
divide.flatten.sum
divide
divide << total[position.first..position.last]
total[position.first..position.last]
(index + 1) % image
index
image
(index + 1) % image == 0
exit
total
total[position.first..position.last]
(index + 1) % image == 0
position
index
total
exit
[*0..size-1].each_slice(image).to_a
[*0..size-1].each_slice(image)[*0..size-1].each_slice(image)
[*0..size-1].each_slice(image)
[*0]
[*0..size-1].each_slice(image).to_a
[0..size-1].each_slice(image).to_a
[0..size]
[*0..size]
[*0..size-1]
exit
350 <= item[1..5].map(&:to_i).sum
item[1..5].map(&:to_i).sum
350 >= item[1..5].map(&:to_i).sum
160 <= 170
160 <= item[4].to_i + item[5].to_i
160 >= item[4].to_i + item[5].to_i
item[4].to_i + item[5].to_i
item[4].to_i
item
exit
item.count
item
ietm
exit
item[1..5].map(&:to_i).sum
item[1..5].map(&:to_i)
test.map(&:to_i)
test.to_i
test = item[1..5]
item[1..5]
item[1..5].sum
item[1..5].to_i
item[1..5]
item[1..4]
item[1//4]
item.to_i
item
item[2].to_i + item[3].to_i
item[1].to_i
item[1].to_i + item[2].to_i
item[1].to_i + item[5].to_i
item[4].to_i + item[5].to_i
item[4].to_i
item[4].class
item[5]
item[4]
item
exit
item[0]
exit
exot
(money - (money * calculation(discount))).floor
money - (money * calculation(discount)).floor
money -(money * calculation(discount)).floor
(money * calculation(discount)).floor
exit
(money * calculation(discount))
exit
(money * calculation(discount)).floor
money * calculation(discount).floor
money * calculation(discount)
money
money * calculation(discount)
exit
money * (discount.to_f / 100.to_f).floor
money * (discount.to_f / 100.to_f)
discount.to_f / 100.to_f
money
exit
letter.permutation.to_a
letter.permutation(letter.length).to_a
letter.permutation.to_a
letter.permutation
letter
next
exit
index.class
item[0] - (item[1] * 5) >= score
index
exit
#{i}
i
item
i
exit
item[0] - (item[1] * 5)
calculation.any?
calculation
calculation = item[0] - (item[1] * 5) >= score
item[0] - (item[1] * 5) >= score
item[0] - (item[1] * 5)
(item[1] * 5)
item[0].class
item[0]
score
item
exit
box
exit
box[1][1]
box[1]
box
csv
exit
goods.select{|n| n == goods[3] or n == goo
goods.select{|n| n == goods[5] or n == goods[3]}
goods.select{|n| n == goods[3] or n == goods[5]}
goods.select{|n| n == goods[3] %% n == goods[5]}
goods.select{|n| n == goods[3] %% goods[5]}
goods.select{|n| n == goods[3]}
goods.select{|n| n == goods[3,5]}
goods.select{|n| n == goods[5] %% n == goods[3]}
goods.select{|n| n == goods[5]}
goods.select{|n| n }
goods.select
goods.include?(goods[0])
goods.include?(goods[1])
goods.include?(1)
goods[3]
goods[5]
goods[0, 3]
goods[0, 2]
goods[0, 1]
goods[0]
goods[0] && [5]
goods[0]&&[5]
goods[0,5]
goods[0, 5]
goods[0][5]
goods[0]
goods[5]
goods.select[5]
goods.select {|n| n.size}
goods.select {|n| n}
goods.select
goods.select(1)
goods[5]
goods[5] and goods[0]
goods[5] or goods[0]
goods[5] && goods[0]
goods[5]
goods[4]
goods.select {|n| n.size == 4}
goods.select {|n| n.size == 5}
goods.select {|n| n.count == 5}
goods.select {|n| n[5] == 5}
goods[5]
goods[5,0]
goods[5][0]
goods[5]
goods[6]
goods
goods = URI.unescape(url).split("/")
URI.unescape(url).split("/")
URI.unescape(url).split("/"
URI.unescape(url).split(/)
URI.unescape(url).split("")
URI.unescape(url).split(/)
URI.unescape(url).spilt(/)
URI.unescape(url)
url
exit
eixt
